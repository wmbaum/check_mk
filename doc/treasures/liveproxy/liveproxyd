#!/usr/bin/python
# encoding: utf-8

import os, sys, getopt, signal, time, socket, select

VERSION="1.2.3i1"

sites = {}
dump_interval = 1

#   .--Proxy---------------------------------------------------------------.
#   |                      ____                                            |
#   |                     |  _ \ _ __ _____  ___   _                       |
#   |                     | |_) | '__/ _ \ \/ / | | |                      |
#   |                     |  __/| | | (_) >  <| |_| |                      |
#   |                     |_|   |_|  \___/_/\_\\__, |                      |
#   |                                          |___/                       |
#   +----------------------------------------------------------------------+
#   |  The actual proxy code                                               |
#   '----------------------------------------------------------------------'

# State of all sites
g_sites = {}

# Example for this dictionary:
# 'mysite': {'channels': [{'since': 1370420497.907061,
#                        'socket': <socket._socketobject object at 0x7f5d0adc39f0>,
#                        'state': 'ready'},
#                       {'since': 1370420502.930155,
#                        'socket': <socket._socketobject object at 0x7f5d0adc3c20>,
#                        'state': 'busy'},
#                       {'since': 1370420492.883395,
#                        'socket': <socket._socketobject object at 0x7f5d0adc3ec0>,
#                        'state': 'heartbeat'}],
#          'clients': [{'since': 1370420648.132495,
#                        'socket': <socket._socketobject object at 0x7f2cc9b68fa0>,
#                        'state': 'idle'},
#                      {'channel': {'client': <Recursion on dict with id=29691200>,
#                        'since': 1370420695.609493,
#                        'socket': <socket._socketobject object at 0x7f2cc9b68a60>,
#                        'state': 'busy'}],
#          'heartbeat': {'channel': None,
#                        'count': 3,
#                        'since': 1370420507.965436},
#          'last_failed_connect': 0,
#          'last_reset': 1370420492.879927,
#          'socket': <socket._socketobject object at 0x7f5d0adc3910>,
#          'state': 'ready'}}
#



# The main loop of the daemon goes here

g_need_restart = False
g_need_reload = False

def liveproxyd_run():
    global g_need_restart, g_need_reload

    open_client_sockets()
    last_dump = 0

    while True:

        try:
            if g_need_restart:
                do_restart()
                g_need_restart = False
            if g_need_reload:
                do_reload()
                g_need_reload = False

            initiate_connections()
            do_heartbeats()

            readable, writable = do_select(0.2)

            complete_connections(writable)
            accept_new_clients(readable)
            get_new_requests(readable)
            distribute_requests()
            get_responses(readable) # also heartbeats
            handle_client_timeouts()
            garbage_collect_sockets()

            now = time.time()
            if now - last_dump > dump_interval:
                dump_state()
                last_dump = now

        except Exception, e:
            if opt_debug:
                raise

            log("Ignoring exception: %s" % e)

def initiate_connections():
    # Create new channels to target sites. Nonblocking!
    for sitename, siteconf in sites.items():
        sitestate = g_sites[sitename]
        channels = sitestate["channels"]
        if len(channels) < siteconf["channels"]:
            if time.time() - sitestate["last_failed_connect"] >= siteconf["connect_retry"]:
                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                s.setblocking(0)
                try:
                    s.connect(siteconf["socket"])
                except socket.error, e:
                    if e.errno != 115: # "Operation now in progress"
                        if opt_debug:
                            raise
                        else:
                            log("Error: cannot create TCP channel to %s:%d: %d" % siteconf["socket"] + (e,))
                            break

                except Exception, e:
                    if opt_debug:
                        raise
                    log("Error: cannot create TCP channel to %s:%d: %d" % siteconf["socket"] + (e,))
                    break

                channels.append({ "socket" : s, "state" : "connecting", "since": time.time()})


def do_heartbeats():
    now = time.time()
    for sitename, sitestate in g_sites.items():
        if sitestate["channels"]:
            rate, timeout = sites[sitename]["heartbeat"]
            channel = sitestate["heartbeat"]["channel"]
            since = sitestate["heartbeat"]["since"]
            if channel: # wait for response
                age = now - since
                if age >= timeout:
                    log("Heartbeat timeout after %.1f sec on channel %s/%d" % (
                        age, sitename, channel["socket"].fileno()))
                    disconnect_from_site(sitename)
            else:
                if now - since >= rate:
                    if not send_heartbeat(sitename, sitestate):
                        if now - since >= 2 * rate:
                            log("Could not send heartbeat for %d secs - no free channel" % (2 * rate))
                            disconnect_from_site(sitename)



def send_heartbeat(sitename, sitestate):
    # find free channel that is unused for the longest time
    now = time.time()
    while True:
        next_channel = None
        for channel in sitestate["channels"]:
            if channel["state"] == "ready":
                if next_channel == None or channel["since"] < next_channel["since"]:
                    min_since = channel["since"]
                    next_channel = channel
        if not next_channel:
            log("Cannot send heartbeat to %s: no channel ready" % sitename)
            return False

        else:
            channel = next_channel
            # log("Sending heartbeat to channel %s/%d" % (sitename, channel["socket"].fileno()))
            try:
                channel["socket"].send("GET status\nKeepAlive: on\nColumns: execute_service_checks\n\n")
                channel["state"] = "heartbeat"
                channel["since"] = now
                sitestate["heartbeat"]["since"] = now
                sitestate["heartbeat"]["channel"] = channel
                return True
            except Exception, e:
                log("Cannot send heartbeat to channel %s/%d: %s" % (sitename, channel["socket"].fileno(), e))
                channel["state"] = "error"


# Close all connections. Site is considered to be dead
def disconnect_from_site(sitename):
    now = time.time()
    log("Site %s is considered dead. Closing all connections." % sitename)
    sitestate = g_sites[sitename]
    sitestate["channels"] = []
    sitestate["state"] = "starting"
    sitestate["heartbeat"] = { "since" : now, "channel" : None, "count" : 0}
    sitestate["last_reset"] = now
    for client in sitestate["clients"]:
        if client["state"] == "wait_for_response":
            client["state"] = "wait_for_channel" # request still stored there


def complete_connections(writable):
    for sitename, sitestate in g_sites.items():
        for channel in sitestate["channels"]:
            if channel["state"] == "connecting" and channel["socket"] in writable:
                try:
                    channel["socket"].send("")
                    channel["socket"].setblocking(1) # avoid signals from interrupting us
                    log("Channel %s/%d successfully connected" % (sitename, channel["socket"].fileno()))
                    channel["state"] = "ready"
                except Exception, e:
                    log("Failed to connect channel %s/%d: %s" % (sitename, channel["socket"].fileno(), e))
                    channel["state"] = "error"
                    sitestate["last_failed_connect"] = time.time()

# Master/Mega/Central select(). We are going to be the select() master. Harhar.
def do_select(timeout):
    read_fds = []
    write_fds = []

    for sitename, sitestate in g_sites.items():
        # outgoing connections currently building up
        for channel in sitestate["channels"]:
            if channel["state"] == "connecting":
                write_fds.append(channel["socket"])

        # new client connections
        read_fds.append(sitestate["socket"])

        # new requests from existing clients
        for client in sitestate["clients"]:
            if client["state"] == "idle":
                read_fds.append(client["socket"])

        # Responses from channels, also heartbeat responses
        for channel in sitestate["channels"]:
            if channel["state"] in [ "busy", "heartbeat" ]:
                read_fds.append(channel["socket"])

    try:
        r_able, w_able, x_able = select.select(read_fds, write_fds, [], timeout)
    except select.error:
        return [], []
    return r_able, w_able


def accept_new_clients(readable):
    for sitename, sitestate in g_sites.items():
        if sitestate["socket"] in readable:
            try:
                s, addrinfo = sitestate["socket"].accept()
                s.setblocking(1)
                log("Accepted new client %s/%d" % (sitename, s.fileno()))
                sitestate["clients"].append({"socket" : s, "state" : "idle", "since" : time.time()})
            except Exception, e:
                if opt_debug:
                    raise
                log("Failed to accept new client for %s: %s" % (sitename, e))

def get_new_requests(readable):
    for sitename, sitestate in g_sites.items():
        for client in sitestate["clients"]:
            if client["state"] == "idle" and \
                (client["socket"] in readable or client.get("nextrequest")):
                try:
                    request = receive_request(sitename, client)
                    if not request:
                        client["state"] = "closed"
                    else:
                        if sitestate["state"] == "starting":
                            respond_client_with_error(client, "Site is currently not reachable.")
                        elif not request.startswith("GET") and not request.startswith("COMMAND"):
                            log("Invalid request [%s] from client %s/%d" % (
                                request.replace("\n", "\\n"), sitename, client["socket"].fileno()))
                            client["state"] = "closed"
                        elif not request.startswith("COMMAND") and "ResponseHeader: fixed16\n" not in request:
                            respond_client_with_error(client, 
                                "Invalid request, you must specify ResponseHeader: fixed16.")
                        else:
                            client["state"] = "wait_for_channel"
                            client["since"] = time.time()
                            client["request"] = request
                            # log("Get new request from %s/%d (%d bytes)" % 
                            #     (sitename, client["socket"].fileno(), len(request)))
                except Exception, e:
                    if opt_debug:
                        raise
                    log("Cannot read request from client %s/%d: %s" % 
                        (sitename, client["socket"].fileno(), e))

def distribute_requests():
    for sitename, sitestate in g_sites.items():
        if sitestate["state"] != "ready":
            continue
        waiting_clients = [ client for client in sitestate["clients"] if client["state"] == "wait_for_channel"]
        
        # Sort after waiting time, we should be fair to all...
        waiting_clients.sort(cmp = lambda a, b: cmp(a["since"], b["since"]))

        # one channel must always be kept for heartbeat
        allowed_channels = len([c for c in sitestate["channels"] if c["state"] in ["ready", "heartbeat"]])
        if allowed_channels <= 1:
            sitestate["state"] = "busy"
        else:
            for channel in sitestate["channels"]:
                if not waiting_clients:
                    break
                if channel["state"] == "ready":
                    client = waiting_clients[0]
                    del waiting_clients[0]
                    forward_request(sitename, client, channel)

def forward_request(sitename, client, channel):
    cls = client["socket"]
    chs = channel["socket"]
    # log("Forwarding request [%s] from client %s/%d to channel %s/%d" % (
    #     client["request"].replace("\n","\\n"), sitename, cls.fileno(), sitename, chs.fileno()))
    try:
        chs.send(client["request"])
        if not client["request"].startswith("COMMAND"):
            client["state"] = "wait_for_response"
            channel["state"] = "busy"
            client["channel"] = channel
            channel["client"] = client
        else:
            client["request"] = ""
            client["state"] = "idle"
    except Exception, e:
        if opt_debug: 
            raise
        log("Error: %s" % e)
        respond_client_with_error(client, str(e))


def respond_client_with_error(client, message):
    try:
        while True:
            try:
                response = "400%12d\n%s\n" % (len(message) + 1, message)
                client["socket"].send(response)
                break
            except socket.error, e:
                if e.errno == 4:
                    continue # Interrupted system call
                else:
                    raise
    except Exception, e:
        if opt_debug: 
            raise
        log("Cannot send error message to client %d: %s" % (
            client["socket"].fileno(), e))
        client["state"] = "closed"

    if client.get("channel"):
        channel = client["channel"]
        del channel["client"]
        del client["channel"]

    client["state"] = "idle"
    client["request"] = ""



# TODO: one malicious client can hang the whole proxy. In order
# to prevent this we'd need partial requests...
def receive_request(sitename, client):
    # Note: Multisite can send several requests at once. For example
    # a command and a wait query (reschedule button)
    request = client.get("nextrequest", "")
    # if request:
    #     log("HIRN: client %s/%d noch ein Rest vom letzten mal: [%s]" % (
    #           sitename, client["socket"].fileno(), request.replace("\n", "\\n")))
    client["nextrequest"] = ""
    while "\n\n" not in request:
        try:
            chunk = client["socket"].recv(65536)
            # log("HIRN: CHUNK von client: [%s]" % chunk.replace("\n", "\\n"))
            request += chunk
        except socket.error, e:
            if e.errno == 104: # Connection reset by peer
                return None
            elif e.errno != 4: # Interrupted system cal
                raise

        if not chunk:
            log("Client %s/%d closed connection." % (sitename, client["socket"].fileno()))
            return None
    # log("HIRN: VOR DEM SPLITTEN: [%s]" % request)
    end = request.index("\n\n")
    client["nextrequest"] = request[end+2:]
    request = request[:end+2]
    #log("HIRN: Diesesmal: [%s], naechstes Mal: [%s]" % (
    #    request.replace("\n", "\\n"), client["nextrequest"].replace("\n", "\\n")))
    return request


def get_responses(readable):
    for sitename, sitestate in g_sites.items():
        for channel in sitestate["channels"]:
            if channel["socket"] in readable:
                if channel["state"] == "busy":
                    receive_response(sitename, channel)
                else:
                    receive_heartbeat(sitename, channel)



def receive_response(sitename, channel):
    client = channel.get("client") # None -> client timed out before response!
    if not client:
        log("Response from timed-out client arrived lately on channel %s/%d" % 
            sitename, channel["socket"].fileno())
    # We always assume fixed16 as response header!
    old_response = channel.get("response", "")
    try:
        chunk = channel["socket"].recv(65536)
        if not chunk:
            raise Exception("Connect closed by foreign host")
            
        response = old_response + chunk
        channel["response"] = response

    except Exception, e:
        log("Cannot read response from %s/%d: %s" % 
            (sitename, channel["socket"].fileno(), e))
        if client:
            client["channel"] = None
            client["state"] = "wait_for_channel"
        channel["state"] = "closed"
        return

    if len(response) < 16: # header not yet complete
        return

    try:
        bodylength = int(response[3:15])
    except Exception, e:
        log("Malformed response header from cannel %s/%d: [%s]" % 
            (sitename, channel["socket"].fileno(), response[:16]))
        if client:
            client["channel"] = None
            client["state"] = "wait_for_channel"
        channel["state"] = "error"
        return

    if len(response) > bodylength + 16:
        log("Too large response on channel %s/%d (%d exceeding bytes: [%s])" % (
            sitename, channel["socket"].fileno(), len(response) - bodylength - 16, response[bodylength + 16:]))
        if client:
            client["channel"] = None
            client["state"] = "wait_for_channel"
        channel["state"] = "error"
        return


    elif len(response) < bodylength + 16:
        return

    # Response complete
    channel["state"] = "ready"
    g_sites[sitename]["state"] = "ready" # at least one channel free
    channel["response"] = ""

    if client:
        del channel["client"]
        del client["channel"]

        try:
            client["socket"].send(response)
            # log("HIRN: An client: [%s]" % response[16:80].replace("\n", ""))
            client["state"] = "idle"
            client["request"] = ""
        except Exception, e:
            if opt_debug:
                raise
            log("Cannot forward response from client %s/%d to client %s/%d: %s", 
                (sitename, channel["socket"].fileno(), sitename, client["socket"].fileno(), e))
            client["state"] = "error"

def receive_heartbeat(sitename, channel):
    sitestate = g_sites[sitename]
    try:
        chunk = channel["socket"].recv(4096)
        if not chunk:
            log("Channel %s/%d closed by foreign host while reading heartbeat" % 
                (sitename, channel["socket"].fileno()))
            disconnect_from_site(sitename)
        elif len(chunk) != 2 or chunk not in ["0\n", "1\n"]:
            log("Channel %s/%d: invalid response \"%s\" to heartbeat" % (
                sitename, channel["socket"].fileno(), chunk))
            disconnect_from_site(sitename)
        else:
            # Set site to ready if at least one other channel exists
            if len(sitestate["channels"]) > 1:
                sitestate["state"] = "ready"
            sitestate["state"] = "ready" # at least one connection is up
            channel["state"] = "ready"
            sitestate["heartbeat"]["since"] = time.time()
            sitestate["heartbeat"]["channel"] = None
            sitestate["heartbeat"]["count"] += 1
    except Exception, e:
        if opt_debug:
            raise
        log("Exception while reading heartbeat from channel %s/%d: %s" % 
            (sitename, channel["socket"].fileno()), e)


def handle_client_timeouts():
    now = time.time()
    for sitename, sitestatus in g_sites.items():
        siteconf = sites[sitename]

        for client in sitestatus["clients"]:
            if client["state"] != "idle":
                age = now - client["since"]
                if client["state"] == "wait_for_channel" and \
                    age >= siteconf["channel_timeout"]:
                    respond_client_with_error(client, "Timeout while waiting for free Livestatus channel to site %s." % 
                        sitename)
                elif client["state"] == "wait_for_response" and \
                    age > siteconf["query_timeout"]:
                    respond_client_with_error(client, "Timeout while waiting for response from site %s." % sitename)





def open_client_sockets():
    if not os.path.exists(opt_socketdir):
        os.makedirs(opt_socketdir)

    for sitename, siteconf in sites.items():
        create_unix_socket(sitename)

def create_unix_socket(sitename):
    path = opt_socketdir + "/" + sitename
    if os.path.exists(path):
        log("Removing left-over unix socket %s" % path)
        os.remove(path)
    try:
        s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        s.bind(path)
        s.listen(10)
    except Exception, e:
        if opt_debug:
            raise
        bail_out("Cannot create unix socket %s: %s" % (path, e))

    g_sites[sitename]["socket"] = s

def garbage_collect_sockets():
    for sitename, sitestate in g_sites.items():
        sitestate["channels"] = [
            channel for channel in sitestate["channels"]
            if channel["state"] not in [ "error", "closed" ]]
        if len(sitestate["channels"]) == 0:
            sitestate["state"] = "starting"
        sitestate["clients"] = [
            channel for channel in sitestate["clients"]
            if channel["state"] not in [ "error", "closed" ]]

def format_time(t):
    return "%s (%3d secs ago)" % (
        time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(t)), time.time() - t)


def dump_state():
    sf = file(opt_statedumppath + ".new", "w")

    sf.write("----------------------------------------------\n")
    sf.write("Current state:\n")
    now = time.time()
    for sitename, sitestate in g_sites.items():
        sf.write("[%s]\n" % sitename)
        sf.write("  State:               %s\n" % sitestate["state"])
        sf.write("  Last Reset:          %s\n" % format_time(sitestate["last_reset"]))
        sf.write("  Last failed connect: %s\n" % format_time(sitestate["last_failed_connect"]))
        sf.write("  Channels:\n")
        for channel in sitestate["channels"]:
            sf.write("    %3d - %-18s-  client: %4s - since: %s\n" % 
                (channel["socket"].fileno(), channel["state"], 
                 channel.get("client") and channel["client"]["socket"].fileno() or "none",
                 format_time(channel["since"])))
        sf.write("  Clients:\n")
        for client in sitestate["clients"]:
            sf.write("    %3d - %-18s- channel: %4s - since: %s\n" % 
                (client["socket"].fileno(), client["state"], 
                 client.get("channel") and client["channel"]["socket"].fileno() or "none",
                 format_time(client["since"])))

        sf.write("  Heartbeat:\n")
        hb = sitestate["heartbeat"]
        sf.write("    heartbeats received: %d\n" % hb["count"])
        if hb["channel"]:
            sf.write("    out since %.1fs\n" % (now - hb["since"]))
        else:
            sf.write("    next in %.1fs\n" % (sites[sitename]["heartbeat"][0] - (now - hb["since"])))

    # import pprint
    # sf.write("\n\n%s\n" % pprint.pformat(g_sites))
    os.rename(opt_statedumppath + ".new", opt_statedumppath)



#.
#   .--Daemon/main---------------------------------------------------------.
#   | ____                                      __               _         |
#   ||  _ \  __ _  ___ _ __ ___   ___  _ __    / / __ ___   __ _(_)_ __    |
#   || | | |/ _` |/ _ \ '_ ` _ \ / _ \| '_ \  / / '_ ` _ \ / _` | | '_ \   |
#   || |_| | (_| |  __/ | | | | | (_) | | | |/ /| | | | | | (_| | | | | |  |
#   ||____/ \__,_|\___|_| |_| |_|\___/|_| |_/_/ |_| |_| |_|\__,_|_|_| |_|  |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   | Global code, daemonize, getopt and usage                             |
#   '----------------------------------------------------------------------'

# Open logfile, fall back to stdout if this is not successfull
def open_log():
    global g_logfile
    try:
        g_logfile = file(opt_logfilepath, "a")
        g_logfile.flush()
    except Exception, e:
        if opt_debug:
            raise
        g_logfile = sys.stderr
        log("Cannot open logfile %s: %s" % (opt_logfilepath, e))

# Send message to logfile. In foreground mode we omit the timestamp
def log(text):
    if type(text) == unicode:
        text = text.encode("utf-8")
    try:
        if not opt_foreground:
            t = time.time()
            g_logfile.write('%s.%06d '  % (time.strftime("%F %T", time.localtime(t)), int(t * 1000000) % 1000000))
        g_logfile.write("%s\n" % text)
        g_logfile.flush()
    except:
        sys.stderr.write("%s\n" % text)

# Log a message, but only in verbose mode
def verbose(text):
    if opt_verbose:
        log(text)


def bail_out(reason):
    log("FATAL ERROR: %s" % reason)
    sys.exit(1)


def usage():
    sys.stdout.write("""Usage: liveproxyd [OPTIONS]

   -v, --verbose        Enable verbose output
   -g, --foreground     Do not daemonize, run in foreground
   -c, --conifg CONFIG  Read configuration from file CONFIG
   --debug              Enable debug mode (let exceptions through)
   -h, --help           Show this help and exit
   -V, --version        Print version and exit

""")


def daemonize(user=0, group=0):
    # do the UNIX double-fork magic, see Stevens' "Advanced
    # Programming in the UNIX Environment" for details (ISBN 0201563177)
    try:
        pid = os.fork()
        if pid > 0:
            # exit first parent
            sys.exit(0)
    except OSError, e:
        sys.stderr.write("Fork failed (#1): %d (%s)\n" % (e.errno, e.strerror))
        sys.exit(1)

    # decouple from parent environment
    # chdir -> don't prevent unmounting...
    os.chdir("/")

    # Create new process group with the process as leader
    os.setsid()

    # Set user/group depending on params
    if group:
        os.setregid(getgrnam(group)[2], getgrnam(group)[2])
    if user:
        os.setreuid(getpwnam(user)[2], getpwnam(user)[2])

    # do second fork
    try:
        pid = os.fork()
        if pid > 0:
            sys.exit(0)
    except OSError, e:
        sys.stderr.write("Fork failed (#2): %d (%s)\n" % (e.errno, e.strerror))
        sys.exit(1)

    sys.stdout.flush()
    sys.stderr.flush()

    si = os.open("/dev/null", os.O_RDONLY)
    so = os.open("/dev/null", os.O_WRONLY)
    os.dup2(si, 0)
    os.dup2(so, 1)
    os.dup2(so, 2)
    os.close(si)
    os.close(so)

    open_log()
    log("Successfully daemonized with PID %d." % os.getpid())

def signal_handler(signum, stack_frame):
    global g_need_restart, g_need_reload
    if signum in [ 2, 3, 15 ]:
        log("Got signal %d. Good bye" % signum)
        sys.exit(0)
    elif signum == 10:
        g_need_restart = True
    elif signum == 12:
        dump_state()
    elif signum == 1:
        g_need_reload = True

def read_configuration():
    if os.path.exists(opt_configfile):
        try:
            execfile(opt_configfile, globals())
        except Exception, e:
            if opt_debug:
                raise
            bail_out("Cannot read configuration file %s: %s" % (
                opt_configfile, e))

    # Create state object for all sites
    for sitename, siteconf in sites.items():
        siteconf.setdefault("channels", 5)
        siteconf.setdefault("heartbeat", (5, 2.0))
        siteconf.setdefault("channel_timeout", 3.0)
        siteconf.setdefault("query_timeout", 120.0)
        siteconf.setdefault("connect_retry", 4.0)
        g_sites[sitename] = {
            "state": "starting",
            "channels" : [],
            "clients"     : [],
            "heartbeat"   : {
                "since"     : time.time(),
                "channel"   : None,
                "count"     : 0,
            },
            "last_reset" : time.time(),
            "last_failed_connect" : 0,
        }
        if siteconf["channels"] <= 1:
            raise bail_out("Invalid configuration for site %s: you need at least two channels" % sitename)

def do_restart():
    log("Restarting myself")
    for fd in range(3, 256):
        try:
            os.close(fd)
        except:
            pass
    os.execvp("liveproxyd", sys.argv)

def do_reload():
    log("Reload not implemented.")

os.unsetenv("LANG")

opt_verbose       = 0
opt_debug         = False
opt_foreground    = False
g_logfile         = sys.stderr

# Please adapt this piece of code
omd_root = os.getenv("OMD_ROOT")
if omd_root:
    opt_logfilepath   = omd_root + "/var/log/liveproxyd.log"
    opt_statedumppath = omd_root + "/var/log/liveproxyd.state"
    opt_pid_file      = omd_root + "/tmp/run/liveproxyd.pid"
    opt_configfile    = omd_root + "/etc/check_mk/liveproxyd.mk"
    opt_socketdir     = omd_root + "/tmp/run/liveproxy"
else:
    curdir = os.path.abspath('.')
    opt_logfilepath   = curdir + "/liveproxyd.log"
    opt_statedumppath = curdir + "/liveproxyd.state"
    opt_pid_file      = curdir + "/liveproxyd.pid"
    opt_configfile    = curdir + "/liveproxyd.mk"
    opt_socketdir     = curdir + "/liveproxy"

short_options = "hvVgc"
long_options = [ "help", "version", "verbose", "debug", "foreground", "config=" ]

try:
    opts, args = getopt.getopt(sys.argv[1:], short_options, long_options)

    # first parse modifers
    for o, a in opts:
        if o in [ '-v', '--verbose' ]:
            opt_verbose += 1
        elif o in [ '-d', '--debug' ]:
            opt_debug = True
        elif o in [ '-g', '--foreground' ]:
            opt_foreground = True
        elif o in [ '-c', '--conifg' ]:
            opt_config = a

    # now handle action options
    for o, a in opts:
        if o in [ '-h', '--help' ]:
            usage()
            sys.exit(0)
        elif o in [ '-V', '--version' ]:
            sys.stdout.write("liveproxyd version %s\n" % VERSION)
            sys.exit(0)

    if not opt_foreground:
        daemonize()

    log("----------------------------------------------------------")
    log("Livestatus Proxy-Daemon starting...")

    read_configuration()
    log("Configured %d sites" % len(sites))

    # Create PID file
    file(opt_pid_file, "w").write("%d\n" % os.getpid())

    # Install signal hander
    signal.signal(1,  signal_handler)  # HUP (--> reload)
    signal.signal(2,  signal_handler)  # INT
    signal.signal(3,  signal_handler)  # QUIT
    signal.signal(15, signal_handler)  # TERM
    signal.signal(10, signal_handler)  # USR1
    signal.signal(12, signal_handler)  # USR2
    signal.signal(13, signal.SIG_IGN)  # PIPE

    # Now let's go...
    liveproxyd_run()

    # We reach this point, if the server has been killed by
    # a signal or hitting Ctrl-C (in foreground mode)

    log("Successfully shut down.")
    os.remove(opt_pid_file)
    sys.exit(0)

except Exception, e:
    if opt_debug:
        raise
    bail_out(e)


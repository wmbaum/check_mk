#!/usr/bin/python
# encoding: utf-8
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2010             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

import sys
import getopt
import socket

import inspect, pprint # FOR DEBUGGING

def usage():
    sys.stderr.write("""Check_MK vSphere Agent

USAGE: agent_vsphere [-i MODULES] [-u USER] [-s SECRET] [-D] [-a] [--debug] HOST
       agent_vsphere -h

ARGUMENTS:
  HOST                          Host name or IP address of vCenter or VMWare HostSystem

OPTIONS:
  -h, --help                    Show this help message and exit
  -u USER, --user USER          Username for vSphere login
  -s SECRET, --secret SECRET    Secret/Password for vSphere login
  -D, --direct                  Assume a directly queried host system (no vCenter). In
                                This we expect data about only one HostSystem to be
                                Found and do not create piggy host data for that host.
  -a, --agent                   Also retrieve data from the normal Check_MK Agent.
                                This makes sense if you query a vCenter that is
                                Installed on a Windows host that you also want to
                                Monitor with Check_MK.
  --debug                       Debug mode: let Python exceptions come through

  -i MODULES, --modules MODULES Modules to query. This is a comma separated list of
                                hostsystem, virtualmachine and storage. Default is to
                                query all modules.


""")

short_options = 'hi:u:s:Da'
long_options  = [
    'help', 'user=', 'secret=', 'direct', 'agent', 'debug', 'modules=',
]

try:
    opts, args = getopt.getopt(sys.argv[1:], short_options, long_options)
except getopt.GetoptError, err:
    print str(err)
    sys.exit(1)

opt_debug    = False
opt_direct   = False
opt_agent    = False
host_address = None
user         = None
secret       = None
mortypes     = [ 'hostsystem', 'virtualmachine', 'datastore' ]

for o,a in opts:
    if o in [ '--debug' ]:
        opt_debug = True
    elif o in [ '-D', '--direct' ]:
        opt_direct = True
    elif o in [ '-a', '--agent' ]:
        opt_agent = True
    elif o in [ '-u', '--user' ]:
        user = a
    elif o in [ '-s', '--secret' ]:
        secret = a
    elif o in [ '-i', '--modules' ]:
        mortypes = a.split(',')
    elif o in [ '-h', '--help' ]:
        usage()
        sys.exit(0)

if len(args) == 1:
    host_address = args[0]
else:
    sys.stderr.write("ERROR: No HOST given.\n")
    usage()
    sys.exit(1)

def get_agent_info_tcp(hostname):
    output = ""
    try:
        if hostname[0] in "123456789":
            ipaddress = hostname
        else:
            ipaddress = socket.gethostbyname(hostname)
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            s.settimeout(3.0)
        except:
            pass # some old Python versions lack settimeout(). Better ignore than fail
        s.connect((ipaddress, 6556))
        try:
            s.setblocking(1)
        except:
            pass
        output = ""
        while True:
            out = s.recv(4096, socket.MSG_WAITALL)
            if out and len(out) > 0:
                output += out
            else:
                break
        s.close()
        return output
    except Exception, e:
        if opt_debug:
            raise
    return output

error_exit = 1
if opt_agent:
    sys.stdout.write(get_agent_info_tcp(host_address))
    error_exit = 0 # do not fail if vSphere fails


try:
    from pysphere import VIServer, VIProperty, MORTypes
    from pysphere.resources import VimService_services as VI
except: 
    sys.stderr.write("pysphere API not found. Please install and try again.\n")
    sys.exit(error_exit)

host = VIServer()

object_collection = []
try:
    host.connect(host_address, user, secret)
except:
    if opt_debug:
        raise
    sys.stderr.write("Cannot connect to vSphere Server. May the wrong credentials. Please correct and make a reinventory.\n")
    sys.exit(error_exit)

print "<<<check_mk>>>"
print "Version: %s" % host.get_api_version()
print "AgentOs: %s " % host.get_server_type()


def output_mors(what, properties, direct=False): 
    if what == "hostsystem":
        obj_type = MORTypes.HostSystem
    elif what == "networking":
        obj_type = MORTypes.HostNetworkSystem
    else:
        obj_type = MORTypes.VirtualMachine

    count = 0
    sections = []
    mors = host._retrieve_properties_traversal(property_names=properties.keys(), obj_type=obj_type)
    if not mors:
        return

    for mor in mors:
        count += 1
        # Parse result into a dictionary. Key is the property name,
        # value is the value (some custom Python classes)
        data = {}
        for p in mor.PropSet:
            # Convert property value using specified conversion function
            data[p.Name] = properties[p.Name](p.Val)

        # Remember the total list of output objects. We will put this into
        # a special section
        object_collection.append((what, data["name"]))
        name = data["name"].split()[0] # get rid of comment
        
        # Output multiplexed Check_MK Agent output (new in version 1.2.3i1)
        if direct:
            if count > 1:
                raise Exception("You specified --direct, but there is more than one HostSystem!")
        else:
            print '<<<<%s>>>>' % name

        print '<<<esx_vsphere_%s>>>' % what
        items = data.items()
        items.sort()
        for name, value in items:
            if type(value) == tuple:
                sections.append(value)
            else:
                print '%s %s' % (name, value)

    # pprint.pprint(sections)
    for section_name, section_lines in sections:
        print '<<<%s>>>' % section_name
        for line in section_lines:
            print line

def debug(x):
    pprint.pprint(inspect.getmembers(x))

def output_datastores():
    property_names = [ 
        "name", 
        "summary.freeSpace", 
        "summary.capacity", 
        "summary.uncommitted", 
        "summary.url", 
        "summary.accessible",
        "summary.type", 
        "summary.maintenanceMode", 
        ]
    # print inspect.getmembers(MORTypes)
    print "<<<esx_vsphere_datastores:sep(%d)>>>" % ord('\t')
    for mor in host._retrieve_properties_traversal(property_names=property_names, obj_type=MORTypes.Datastore):
        for entry in mor.PropSet:
            if entry.Name == "name":
                print '[%s]' % entry.Val
            else:
                print '%s\t%s' % (entry.Name.split(".")[1], entry.Val)
        



def conv_multipath(value):
    return " ".join(["%s %s" % (p.Name, p.PathState) for p in value.HostMultipathStateInfoPath])

def conv_numeric_sensor_info(value):
    # import inspect, pprint
    lines = []
    for sensor in value.HostNumericSensorInfo:
        if not hasattr(sensor, "HealthState"):
            continue # should never happen. If happens, sensor not interesting for monitoring
        if sensor.HealthState.Key == "green":
            continue # just output sensors with issuse - saves lots of data

        line = '%s;%s;%s;%s;%s;' % ( sensor.Name, sensor.BaseUnits, sensor.CurrentReading, sensor.SensorType, sensor.UnitModifier)
        if hasattr(sensor, "RateUnits"):
            line += sensor.RateUnits
        line += ";%s;%s;%s" % (sensor.HealthState.Key, sensor.HealthState.Label, sensor.HealthState.Summary)
        lines.append(line)

        # print inspect.getmembers(sensor)
    return ('esx_vsphere_sensors:sep(59)', lines)

    # return pprint.pformat(inspect.getmembers(value))

if "datastore" in mortypes:
    output_datastores()


if "hostsystem" in mortypes:
    output_mors("hostsystem", {
      "name": str,

      "overallStatus": str,
      "runtime.powerState": str,
      "runtime.inMaintenanceMode": str,

      "summary.quickStats.overallMemoryUsage":     str,
      "hardware.memorySize": str,

      "summary.quickStats.overallCpuUsage": str,
      #"summary.quickStats.overallCpuDemand": str,
      #"summary.quickStats.sharedMemory": str,
#      "summary.quickStats.guestMemoryUsage": str,

      "config.multipathState.path": conv_multipath,

      "hardware.cpuInfo.numCpuPackages": str,
      "hardware.cpuInfo.numCpuCores": str,
      "hardware.cpuInfo.numCpuThreads": str,
      "hardware.cpuInfo.hz": str,

      "runtime.healthSystemRuntime.systemHealthInfo.numericSensorInfo" : conv_numeric_sensor_info,

      #"summary.quickStats.uptime": str,
    }, opt_direct)

# Warning: we have no guarantee that all properties are always
# output. For example if a VM is powered off, the only property
# we get is summary.runtime.powerState
if "virtualmachine" in mortypes:
    output_mors("virtualmachine", {
     "name": str,
     "guestHeartbeatStatus": str,
     "summary.quickStats.overallCpuUsage": str,
     "summary.quickStats.overallCpuDemand": str,
     "summary.quickStats.uptimeSeconds": str,

      "summary.quickStats.overallCpuUsage": str,
      "summary.quickStats.overallCpuDemand": str,
      "summary.quickStats.guestMemoryUsage": str,
      "summary.quickStats.hostMemoryUsage": str,
      "summary.quickStats.distributedCpuEntitlement": str,
      "summary.quickStats.distributedMemoryEntitlement": str,
      "summary.quickStats.staticCpuEntitlement": str,
      "summary.quickStats.staticMemoryEntitlement": str,
      "summary.quickStats.privateMemory": str,
      "summary.quickStats.sharedMemory": str,
      "summary.quickStats.swappedMemory": str,
      "summary.quickStats.balloonedMemory": str,
      "summary.quickStats.consumedOverheadMemory": str,
      "summary.quickStats.compressedMemory": str,

      # Virtual machine configuration
      "config.hardware.memoryMB": str,
      "config.hardware.numCPU": str,
      "config.hardware.numCoresPerSocket": str,
      #"config.hardware.hwVersion": str,
      #"config.hardware.guestId": str,
      #"config.hardware.uuid": str,

      "summary.runtime.powerState": str,
    })


print "<<<<>>>>"

print "<<<esx_vsphere_objects:sep(9)>>>"
for what, name in object_collection:
    print "%s\t%s" % (what, name)
host.disconnect()

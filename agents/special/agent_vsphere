#!/usr/bin/python
# encoding: utf-8
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2010             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

import sys
import argparse

parser = argparse.ArgumentParser(description='Check_MK vSphere Agent')
group = parser.add_argument_group()
group.add_argument('-p', type=int, help="Port Number of vSphere Server")
group.add_argument('-i', help="Check the hostsystem and or virtualmachine. Comma separated")
parser.add_argument('-u', help="Username")
parser.add_argument('-s', help="Secret")
parser.add_argument('Hostname', help="Hostname")
params = vars(parser.parse_args())


try:
    from pysphere import VIServer, VIProperty, MORTypes
    from pysphere.resources import VimService_services as VI
except: 
    sys.stderr.write("pysphere API not found. Please install and try again.\n")
    sys.exit(1)

host = VIServer()

object_collection = {} 

try:
    host.connect(params['Hostname'], params['u'], params['s'])
except:
    sys.stderr.write("Cannot connect to vSphere Server. May the wrong credentials. Please correct and make a reinventory.")
    sys.exit(1)

print "<<<check_mk>>>"
print "Version: %s" % host.get_api_version()
print "AgentOs: %s " % host.get_server_type()

def output_mors(what, properties): 
    if what == "hostsystem":
        obj_type = MORTypes.HostSystem
    else:
        obj_type = MORTypes.VirtualMachine

    for mor in host._retrieve_properties_traversal(property_names=properties.keys(), obj_type=obj_type):
        # Parse result into a dictionary. Key is the property name,
        # value is the value (some custom Python classes)
        data = {}
        for p in mor.PropSet:
            # Convert property value using specified conversion function
            data[p.Name] = properties[p.Name](p.Val)


        # Get the name of this Host/VirtualMachine
        # May there a comments in the field, so split at whitespace
        name = data["name"].split()[0]

        object_collection[name] = (what, data['name'])
        
        ## Output multiplexed Check_MK Agent output (new in version 1.2.3i1)
        print '<<<<%s>>>>' % name
        print '<<<esx_vsphere_%s>>>' % what
        for name, value in data.items():
            print '%s %s' % (name, value)


def conv_multipath(value):
    return " ".join(["%s %s" % (p.Name, p.PathState) for p in value.HostMultipathStateInfoPath])

if params['i'] == None:
    check = [ 'hostsystem', 'virtualmachine' ]
else:
    check = params['i'].split(',')

if "hostsystem" in check:
    output_mors("hostsystem", {
      "name": str,

      "summary.quickStats.overallMemoryUsage":     str,
      "hardware.memorySize": str,


      "overallStatus": str,
      "runtime.powerState": str,
      "runtime.inMaintenanceMode": str,

      "summary.quickStats.overallCpuUsage": str,
      "hardware.cpuInfo.numCpuCores": str,
      "hardware.cpuInfo.hz": str,

      "config.multipathState.path": conv_multipath,

      #"hardware.cpuInfo.numCpuPackages": str,
      #"hardware.cpuInfo.numCpuThreads": str,
      #"summary.quickStats.uptime": str,
    })

if "virtualmachine" in check:
    output_mors("virtualmachine", {
     "name": str,
     "guestHeartbeatStatus": str,
     "summary.quickStats.overallCpuUsage": str,
     "summary.quickStats.uptimeSeconds": str,

     #"config.hardware.memoryMB": str,
     "summary.quickStats.guestMemoryUsage": str,
     "summary.quickStats.hostMemoryUsage": str,
     "summary.quickStats.balloonedMemory": str,
     "summary.quickStats.privateMemory": str,
     "summary.quickStats.sharedMemory": str,

     "summary.quickStats.overallCpuUsage": str,
     "summary.runtime.powerState": str,
     "config.hardware.numCPU": str,
    })

print "<<<<>>>>"

print "<<<local>>>"
for name, data in object_collection.items():
    print "0 %s-%s - INFO: collecting piggyback data for %s" % (data[0], name, data[1])
host.disconnect()

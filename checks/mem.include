#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

memused_default_levels = (150.0, 200.0)
mem_extended_perfdata = False

def check_memory(params, meminfo):
    swapused = meminfo['SwapTotal'] - meminfo['SwapFree']
    memused  = meminfo['MemTotal']  - meminfo['MemFree']
    # Buffers and Cached are optional (not supported on Windows yet)
    caches   = meminfo.get('Buffers', 0) + meminfo.get('Cached', 0)
    # Size of Pagetable on Linux can be relevant e.g. on ORACLE
    # servers with much memory, that do not use HugeTables. We account
    # that for used
    pagetables = meminfo.get('PageTables', 0)
    pagetables_mb = pagetables / 1024.0

    # Add extended memory performance data, if this is
    # enabled and the agent provides that information.
    extended_perf = []
    extrainfo = ""
    if mem_extended_perfdata:
        mapped = meminfo.get('Mapped')
        if mapped:
            mapped_mb = int(mapped) / 1024
            committed_as = meminfo.get('Committed_AS')
            if committed_as:
                committed_as_mb = int(committed_as) / 1024
            else:
                committed_as = 0
            extended_perf = [
                ('mapped',       str(mapped_mb)       + 'MB'),
                ('committed_as', str(committed_as_mb) + 'MB'),
                ('pagetables',   str(pagetables_mb)   + 'MB'),
            ]
            extrainfo = ", %.1f GB mapped, %.1f GB committed" % \
                        (mapped_mb / 1024.0, committed_as_mb / 1024.0)

    totalused_kb = (swapused + memused - caches + pagetables)
    totalused_mb = totalused_kb / 1024.0
    totalmem_kb = meminfo['MemTotal']
    totalmem_mb = totalmem_kb / 1024.0
    totalused_perc = 100 * (float(totalused_kb) / float(totalmem_kb))
    totalvirt_mb = (meminfo['SwapTotal'] + meminfo['MemTotal']) / 1024.0
    warn, crit = params

    perfdata = [
        ('ramused', str( (memused - caches) / 1024) + 'MB', '', '', 0, totalmem_mb),
        ('swapused', str(swapused / 1024) + 'MB', '', '', 0, meminfo['SwapTotal']/1024) ]

    # levels may be given either in int -> MB or in float -> percentages

    if pagetables > 0:
        pgtext = " + %.2f GB Pagetables" % (pagetables_mb / 1024.0)
    else:
        pgtext = ""
    infotext = ("%.2f GB used (%.2f GB RAM + %.2f GB SWAP%s, this is %.1f%% of %.2f GB RAM)" % \
               (totalused_mb / 1024.0, (memused-caches) / 1024.0 / 1024, swapused / 1024.0 / 1024,
               pgtext, totalused_perc, totalmem_mb / 1024.0)) \
               + extrainfo

    if type(warn) == float:
        perfdata.append(('memused', str(totalused_mb)+'MB', int(warn/100.0 * totalmem_mb),
                        int(crit/100.0 * totalmem_mb), 0, totalvirt_mb))
        perfdata += extended_perf
        if totalused_perc >= crit:
            return (2, '%s, critical at %.1f%%' % (infotext, crit), perfdata)
        elif totalused_perc >= warn:
            return (1, '%s, warning at %.1f%%' % (infotext, warn), perfdata)
        else:
            return (0, '%s' % infotext, perfdata)

    else:
        perfdata.append(('memused', str(totalused_mb)+'MB', warn, crit, 0, totalvirt_mb))
        perfdata += extended_perf
        if totalused_mb >= crit:
            return (2, '%s, critical at %.2f GB' % (infotext, crit / 1024.0), perfdata)
        elif totalused_mb >= warn:
            return (1, '%s, warning at %.2f GB' % (infotext, warn / 1024.0), perfdata)
        else:
            return (0, '%s' % infotext, perfdata)


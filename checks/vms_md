#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# <<<vms_md>>>
# MD DSA25 2 2
# MD DSA101 2 2
# MD DSA102 2 2
# MD DSA103 2 2
# MD DSA104 2 2

# Bei der Inventur holen wir die Liste aller Shadowsets und monitoren
# in Zukunft, ob alle noch vorhanden sind, keine zuviel ist (Warning)
# alle die richtige Anzahl von Platten aktiv haben.
def inventory_vms_md(info):
    shadowsets = []
    for line in info:
        shadowsets.append(line[1])
    if len(shadowsets) == 0:
        return []
    else:
        return [(None, '""', shadowsets)]

def check_vms_md(item, params, info):
    shadowsets = []
    errorlevel = 0
    errors = []
    try:
        for line in info:
            name = line[1]
            disks = int(line[2])
            online = int(line[3])
            if online < disks:
                errorlevel = 2
                errors.append("%s: only %d out of %d disks online" % (name, online, disks) )
            if name not in params:
                errorlevel = max(errorlevel, 1)
                errors.append("%s: unknown" % name)
            shadowsets.append(name)
    except:
        return (3, "invalid output from plugin")

    # check for missing shadowsets
    for name in params:
        if name not in shadowsets:
            errorlevel = 2
            errors.append("%s: missing" % name)
    if errorlevel == 0:
        return (0, "%d shadowsets in normal state" % len(shadowsets))
    else:
        return (errorlevel, ", ".join(errors))



check_info["vms_md"] = {
    'check_function':          check_vms_md,
    'inventory_function':      inventory_vms_md,
    'service_description':     'Shadowsets',
}

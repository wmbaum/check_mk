#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# +------------------------------------------------------------------+
# | The initial version of this file has been contributed by:        |
# |                                                                  |
# | Michael Nieporte <Michael.Nieporte@uk-essen.de>                  |
# +------------------------------------------------------------------+


akcp_sensor_temp_defaultlevels = (28, 32)

def inventory_akcp_sensor_temp(info):
    inventory = []
    for desc, degree, status, online, degreetype, degreeraw in info:
        if online == "1":
            inventory.append( (desc, "akcp_sensor_temp_defaultlevels") )
    return inventory

def check_akcp_sensor_temp(item, params, info):
    for desc, degree, status, online, degreetype, degreeraw in info:
        if desc == item:
            if degreetype == "0":
                type = "F"
            else:
                type = "C"
            warn, crit = params
            if degreeraw != "":
                temp = saveint(degreeraw) / 10.0
            else:
                temp = float(degree)
            if status == "7":
                return (3, "Sensor Error")
            else:
                if online == "1":
                    # break temp down to celsius if it had been defined as Fahrenheit.
                    if type == "F":
                        temp = to_celsius(temp)
                        type = "C"
                    infotext = "%.1f " % temp + type + " (warn/crit at %.1f/%.1f " % (warn, crit) + type + ")"
                    perfdata = [ ( "temperature", temp, warn, crit ) ]
                    if temp >= crit:
                        return (2, "Temperature is: " + infotext, perfdata)
                    elif temp >= warn:
                        return (1, "Temperature is: " + infotext, perfdata)
                    else:
                        return (0, "Temperature is: " + infotext, perfdata )
                else:
                    return (3, "Sensor is offline")
    return (3, "Sensor not found")

# possible values for sensorProbeTempStatus:
# noStatus(1), normal(2), highWarning(3), highCritical(4),
# lowWarning(5), lowCritical(6), sensorError(7)
check_info["akcp_sensor_temp"] = {
    'check_function':          check_akcp_sensor_temp,
    'inventory_function':      inventory_akcp_sensor_temp,
    'service_description':     'Temperature %s',
    'has_perfdata':            True,
    'snmp_info':               (
        ".1.3.6.1.4.1.3854.1.2.2.1.16.1", [
            1, #sensorProbeTempDescription
            3, #sensorProbeTempDegree
            4, #sensorProbeTempStatus
            5, #sensorProbeTempOnline - online(1), offline(2)
            12, #sensorProbeTempDegreeType - The degrees are in fahrenheit(0) or in celsius(1)
            14, #sensorProbeTempDegreeRaw - SP Only: The raw degree data from the temperature sensor, slightly hig
        ],
    ),
    'snmp_scan_function':      \
         lambda oid: "AKCP" in oid(".1.3.6.1.4.1.3854.1.1.6.0") and "sensorProbe" in oid(".1.3.6.1.4.1.3854.1.1.8.0"),
    'group':                   'room_temperature',
}

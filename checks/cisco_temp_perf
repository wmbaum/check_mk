#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

#                normal(1):         the environment is good, such as low
#                                   temperature.
#
#                warning(2):        the environment is bad, such as temperature
#                                   above normal operation range but not too
#                                   high.
#
#                critical(3):       the environment is very bad, such as
#                                   temperature much higher than normal
#                                   operation limit.
#
#                shutdown(4):       the environment is the worst, the system
#                                   should be shutdown immediately.
#
#                notPresent(5):     the environmental monitor is not present,
#                                   such as temperature sensors do not exist.
#
#                notFunctioning(6): the environmental monitor does not
#                                   function properly, such as a temperature
#                                   sensor generates a abnormal data like
#                                   1000 C.

cisco_temp_perf_envmon_states = {
  1: "normal",
  2: "warning",
  3: "critical",
  4: "shutdown",
  5: "notPresent",
  6: "notFunctioning"
}

def inventory_cisco_temp_perf(info):
    inventory = []
    for line in info:
        name = line[0]
        if name == "":
            name = line[4]
        inventory.append((name, None))
    return inventory

def check_cisco_temp_perf(item, _no_params, info):
    for line in info:
        if line[0] == item or line[4] == item:
            temp = saveint(line[1])
            if temp != 0:
                perfdata = [("temp", temp, None, saveint(line[2]) )]
                temptext = ", %d degrees (critical at %d)" % (temp, saveint(line[2]))
            else:
                perfdata = []
                temptext = ""

            state = int(line[3])
            statename = cisco_temp_perf_envmon_states.get(state, "(invalid)")
            if state == 1:
                return (0, "state is normal%s" % temptext, perfdata)
            elif state == 2:
                return (1, "state is %s%s" % (statename, temptext), perfdata)
            elif state in [ 5, 6 ]:
                return (3, "state is %s" % statename)
            else:
                return (2, "state is %s%s" % (statename, temptext), perfdata)
    return (3, "Item %s not found in SNMP data" % item)

check_info['cisco_temp_perf'] = (check_cisco_temp_perf, "Temperature %s", 1,  inventory_cisco_temp_perf)
snmp_info['cisco_temp_perf'] = ( ".1.3.6.1.4.1.9.9.13.1.3.1", [ 2, 3, 4, 6, OID_END ] ) # CISCO-SMI
snmp_scan_functions['cisco_temp_perf'] = \
    lambda oid: "cisco" in oid(".1.3.6.1.2.1.1.1.0").lower() and \
           oid(".1.3.6.1.4.1.9.9.13.1.3.1.3.*") != None and \
           oid(".1.3.6.1.4.1.9.9.91.1.1.1.1.*") == None,
checkgroup_of["cisco_temp_perf"] = "temperature_auto"

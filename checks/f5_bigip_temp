#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


# Agent / MIB output
# F5-BIGIP-SYSTEM-MIB::sysChassisTempNumber
# 1.3.6.1.4.1.3375.2.1.3.2.2.1.0  1
# 1.3.6.1.4.1.3375.2.1.3.2.2.2.1.1.101  101
# 1.3.6.1.4.1.3375.2.1.3.2.2.2.1.2.101  1
# 1.3.6.1.4.1.3375.2.1.3.2.3.1.0  2
# F5-BIGIP-SYSTEM-MIB::sysCpuTemperature
# 1.3.6.1.4.1.3375.2.1.3.1.2.1.1.1  1
# 1.3.6.1.4.1.3375.2.1.3.1.2.1.2.1  54


def f5_bigip_temp_genitem(info):
    sensors = []
    # parse all detected sensors and name them according to the mib section they came from.
    # we will assign a base "nominal" temperature here based on sample MIB data
    for chassis_sensor in info[0]:
        id   = chassis_sensor[0]
        type = "Chassis"
        cur_temp = int(chassis_sensor[1])
        nom_temp = 49
        sensors.append([ ("%s %s" % (id, type)), cur_temp, nom_temp  ])
    for cpu_sensor in info[1]:
        id        = cpu_sensor[0]
        type      = "CPU"
        cur_temp  = int(cpu_sensor[1])
        nom_temp  = 55
        sensors.append([ ("%s %s" % (id, type)), cur_temp, nom_temp ])

    return sensors


def inventory_f5_bigip_temp(info):
    inventory = []
    for sensor in f5_bigip_temp_genitem(info):
        inventory.append((sensor[0], sensor[2]))
    return inventory


def check_f5_bigip_temp(item, params, info):

    for sensor in f5_bigip_temp_genitem(info):
        if item == sensor[0]:
            tmpdiff = sensor[1] - sensor[2]
            msgtxt = "Temperature is %dC" % (sensor[1])
            perfdata = [ ("temp", sensor[1]) ]
            if 5 >= tmpdiff:
                return (0, msgtxt, perfdata)
            elif tmpdiff > 15:
                return (2, msgtxt + "(!!)", perfdata)
            elif tmpdiff > 10:
                return (1, msgtxt + "(!)", perfdata)
            else:
                return (3, "unable to read temperature")



    return (3, "item not found in SNMP output")






# Get ID and Speed from the CPU and chassis fan tables

check_info["f5_bigip_temp"] = {
    'check_function':          check_f5_bigip_temp,
    'inventory_function':      inventory_f5_bigip_temp,
    'service_description':     'Temperature %s',
    'has_perfdata':            True,
    'snmp_info':               [('.1.3.6.1.4.1.3375.2.1.3.2.3.2.1', [1, 2]), ('.1.3.6.1.4.1.3375.2.1.3.1.2.1', [1, 2])],
    'snmp_scan_function':      \
     lambda oid: '.1.3.6.1.4.1.3375.2' in oid(".1.3.6.1.2.1.1.2.0") and "big-ip" in oid(".1.3.6.1.4.1.3375.2.1.4.1.0").lower(),
}

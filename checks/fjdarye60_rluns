#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def inventoryfunc(info):
    inventory = []
    for line in info:
        rawdata = line[1]
        if rawdata[2] == '\xa0': # RLUN is present
            inventory.append( (line[0], "", None) )
    return inventory

def checkfunc(item, _no_params, info):
    for line in info:
        if item == line[0]:
            rawdata = line[1]
            if rawdata[2] != '\xa0':
                return (2, "RLUN is not present")
            elif rawdata[3] == '\x08':
                return (1, "RLUN is rebuilding") # we assume that ;-)
            elif rawdata[3] == '\x00':
                return (0, "RLUN is in normal state") # assumption
            else:
                return (2, "RLUN in unknown state %02x" % ord(rawdata[3]))

    return (3, "No RLUN %s in SNMP output" % item)



check_info["fjdarye60_rluns"] = {
    'check_function':          checkfunc,
    'inventory_function':      inventoryfunc,
    'service_description':     'RLUN %s',
    'snmp_info':               ('.1.3.6.1.4.1.211.1.21.1.60.3.4.2.1', [0, '2']),
    'snmp_scan_function':      \
          lambda oid: oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.211.1.21.1.60",
}

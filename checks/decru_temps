#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def inventory_decru_temps(info):
    return [ (l[0], (int(to_celsius(int(l[1]))) + 4.0,
    int(to_celsius(int(l[1]))) + 8.0 ) ) for l in info ]

def check_decru_temps(item, params, info):
    for temp in info:
        if temp[0] == item:
            temp = to_celsius(int(temp[1]))
            warn, crit = params
            perfdata = [("temp", temp, "", "", warn, crit)]
            infotxt = " - %d C (levels at %d/%d)" % (temp, warn, crit)
            if temp >= crit:
                return (2, "CRIT" + infotxt, perfdata)
            elif temp >= warn:
                return (1, "WARN" + infotxt, perfdata)
            else:
                return (0, "OK" + infotxt, perfdata)

    return (3, "UNKNOWN - sensor not found")

check_info['decru_temps'] = (check_decru_temps, "Temperature %s", 1, inventory_decru_temps)

snmp_info['decru_temps'] = ( ".1.3.6.1.4.1.12962.1.2.4.1", [ 2, 3 ] )
snmp_scan_functions['decru_temps'] = \
    lambda oid: "datafort" in oid('.1.3.6.1.2.1.1.1.0').lower()
checkgroup_of["decru_temps"] = "hw_temperature"

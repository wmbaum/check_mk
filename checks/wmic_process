#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def check_wmic_process(item, params, info):
    name, memwarn, memcrit, pagewarn, pagecrit, cpuwarn, cpucrit = params
    count, mem, page, userc, kernelc = 0, 0, 0, 0, 0
    cpucores = 1
    if len(info) == 0:
        return (3, "No output from agent in section wmic_process")
    legend = info[0]
    for line in info[1:]:
        psinfo = dict(zip(legend, line))
        if "ThreadCount" in legend and psinfo["Name"].lower() == "system idle process":
            cpucores = int(psinfo["ThreadCount"])
        elif psinfo["Name"].lower() == name.lower():
            count   += 1
            mem     += int(psinfo["WorkingSetSize"])
            page    += int(psinfo["PageFileUsage"])
            userc   += int(psinfo["UserModeTime"])
            kernelc += int(psinfo["KernelModeTime"])

    mem_mb = mem / 1048576.0
    page_mb = page / 1048576.0
    timedif, user_per_sec = get_counter("wmic_process.user.%s.%d" % (name, count), time.time(), userc)
    timedif, kernel_per_sec = get_counter("wmic_process.kernel.%s.%d" % (name, count), time.time(), kernelc)
    user_perc = user_per_sec / 100000.0 / cpucores
    kernel_perc = kernel_per_sec / 100000.0 / cpucores
    cpu_perc = user_perc + kernel_perc
    perfdata = [
            ("mem",    mem_mb,      memwarn,  memcrit),
            ("page",   page_mb,     pagewarn, pagecrit),
            ("user",   user_perc,   cpuwarn,  cpucrit,  0, 100),
            ("kernel", kernel_perc, cpuwarn,  cpucrit,  0, 100) ]

    infos = [
       "%d processes" % count,
       "", # 1
       ", %.1fMB RAM" % mem_mb,
       "", # 3
       ", %1.fMB Page" % page_mb,
       "", # 5
       ", %.0f%%/%.0f%% User/Kernel" % (user_perc, kernel_perc),
       "", # 7
    ]

    if cpu_perc >= cpucrit:
        state = 2
        infos[7] = "(!!) - critical at %d%%" % cpucrit

    elif page_mb >= pagecrit:
        state = 2
        infos[5] = "(!!) critical at %d MB" % pagecrit

    elif mem_mb >= memcrit:
        state = 2
        infos[3] = "(!!) critical at %d MB" % memcrit

    elif cpu_perc >= cpuwarn:
        state = 1
        infos[7] = "(!) warning at %d%%" % cpuwarn

    elif mem_mb >= memwarn:
        state = 1
        infos[3] = "(!) warning at %d MB" % memwarn

    elif page_mb >= pagewarn:
        state = 1
        infos[5] = "(!) warning at %d MB" % pagewarn

    else:
        state = 0

    return (state, "".join(infos), perfdata)

check_info["wmic_process"] = {
    'check_function':          check_wmic_process,
    'service_description':     'proc_%s',
    'has_perfdata':            True,
}

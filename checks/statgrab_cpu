#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.



def inventory_statgrab_cpu(info):
   if len(info) > 1:
       return [(None, None)]


def check_statgrab_cpu(item, params, info):
    global g_counters
    user = 0
    for var, value in info:
        if var == 'iowait':
            wait = int(value)
        elif var == 'kernel':
            system = int(value)
        elif var == 'nice' or var == 'user':
            user += int(value)
        elif var == 'total':
            total = int(value)

    values = [ user, system, wait, total ]
    this_time = int(time.time())
    diff_values = [ ]
    n = 0
    for v in values:
        n += 1
        countername = "cpu.util.%d" % n
        last_time, last_val = g_counters.get(countername, (0, 0))
        diff_values.append(v - last_val)
        g_counters[countername] = (this_time, v)

    diff_total = diff_values[3]
    if diff_total == 0:
        return (0, "too short interval")
    user_perc   = 100.0 * float(diff_values[0]) / float(diff_total)
    system_perc = 100.0 * float(diff_values[1]) / float(diff_total)
    wait_perc   = 100.0 * float(diff_values[2]) / float(diff_total)
    perfdata = [
          ( "user",   "%.3f" % user_perc ),
          ( "system", "%.3f" % system_perc ),
          ( "wait",   "%.3f" % wait_perc ) ]
    return (0, "user: %2.0f%%, system: %2.0f%%, wait: %2.0f%%" % (user_perc, system_perc, wait_perc), perfdata)


check_info["statgrab_cpu"] = {
    'check_function':          check_statgrab_cpu,
    'inventory_function':      inventory_statgrab_cpu,
    'service_description':     'CPU utilization',
    'has_perfdata':            True,
}

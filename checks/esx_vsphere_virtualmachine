#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def esx_vsphere_virtualmachine_convert(info):
    data = {}
    for line in info:
        data[line[0]] = line[1:]
    return data

esx_machine_mem_default = {} 

def inventory_esx_vsphere_virtualmachine_mem(info):
    data = esx_vsphere_virtualmachine_convert(info).keys()
    if 'summary.quickStats.guestMemoryUsage' in data:
        return [(None, esx_machine_mem_default)]

def check_esx_vsphere_virtualmachine_mem(item, params, info):
    data = esx_vsphere_virtualmachine_convert(info)

    #active guest memory
    guest_memory_usage  = savefloat(data["summary.quickStats.guestMemoryUsage"][0]) * 1024 * 1024
    #consumed host memory
    host_memory_usage   = savefloat(data["summary.quickStats.hostMemoryUsage"][0]) * 1024 * 1024
    #size of the balloon driver in the VM
    ballooned_memory    = savefloat(data["summary.quickStats.balloonedMemory"][0]) * 1024 * 1024
    #The portion of memory, in MB, that is granted to this VM from non-shared host memory
    private_memory      = savefloat(data["summary.quickStats.privateMemory"][0]) * 1024 * 1024
    #The portion of memory, in MB, that is granted to this VM from host memory that is shared between VMs.
    shared_memory       = savefloat(data["summary.quickStats.sharedMemory"][0]) * 1024 * 1024

    perf = [
        ("host_memory_usage", host_memory_usage ),
        ("guest_memory_usage", guest_memory_usage ),
        ("ballooned_memory", ballooned_memory ),
        ("shared_memory", shared_memory ),
    ] 

    message = " - Consumed: %s, Active: %s, " \
              "Ballooned: %s, Private: %s, Shared: %s" % \
    (get_bytes_human_readable(host_memory_usage), \
     get_bytes_human_readable(guest_memory_usage), get_bytes_human_readable(ballooned_memory), \
     get_bytes_human_readable(private_memory), get_bytes_human_readable(shared_memory) )
    return(0, nagios_state_names[0] + message, perf)


check_info['esx_vsphere_virtualmachine.mem_usage'] = {
  "inventory_function"  : inventory_esx_vsphere_virtualmachine_mem,
  "check_function"      : check_esx_vsphere_virtualmachine_mem,
  "service_description" : "ESX Memory",
  "has_perfdata"        : True
}


def inventory_esx_vsphere_virtualmachine_name(info):
    data = esx_vsphere_virtualmachine_convert(info).keys()
    if 'summary.quickStats.guestMemoryUsage' in data and 'config.hardware.memoryMB' in data:
        return [(None, esx_machine_mem_default)]

def check_esx_vsphere_virtualmachine_name(item, params, info):
    data = esx_vsphere_virtualmachine_convert(info)
    return(0, "INFO - %s" % " ".join(data['name']))


check_info['esx_vsphere_virtualmachine.name'] = {
  "inventory_function"  : inventory_esx_vsphere_virtualmachine_name,
  "check_function"      : check_esx_vsphere_virtualmachine_name,
  "service_description" : "ESX Name",
}

def inventory_esx_vsphere_virtualmachine_hb_status(info):
    data = esx_vsphere_virtualmachine_convert(info).keys()
    if 'guestHeartbeatStatus' in data:
        return [(None, None)]

def check_esx_vsphere_virtualmachine_hb_status(item, params, info):
    data = esx_vsphere_virtualmachine_convert(info)

    vm_status = data['guestHeartbeatStatus'][0]
    state = 3
    if vm_status == 'gray':
        state = 3
    elif vm_status == 'green':
        state = 0
    elif vm_status == 'red':
        state = 2 
    elif vm_status == 'yellow':
        state = 1
    return(state, nagios_state_names[state] + " - Hearbeat status is %s" % vm_status)


check_info['esx_vsphere_virtualmachine.heartbeatStatus'] = {
  "inventory_function"  : inventory_esx_vsphere_virtualmachine_hb_status,
  "check_function"      : check_esx_vsphere_virtualmachine_hb_status,
  "service_description" : "ESX Heartbeat Status",
}


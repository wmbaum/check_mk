#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def inventory_mrpe(info):
    items = []
    for line in info:
        # New Linux agent sends (check_name) in first column. Stay
        # compatible with MRPE versions not providing this info
        if line[0].startswith("("):
            item = line[1]
        else:
            item = line[0]
        items.append((item, None))
    return items


def check_mrpe(item, params, info):
    # This check is cluster-aware. An item might be found
    # more than once. In that case we use the best of the
    # multiple statuses.

    best_state = None

    for line in info:
        if line[0].startswith("("):
            check_name = line[0][1:-1]
            line = line[1:]
        else:
            check_name = None
        if line[0] == item:
            state = int(line[1])
            rest = " ".join(line[2:])
            parts = rest.split("|", 1)
            # replace first line break with "\\n" -> Nagios expects it like this
            output = parts[0].replace("\1", "\\n", 1).replace("\1", "<br>")

            perfdata = []
            if len(parts) > 1: # found pipe symbol
                perftxt = parts[1].strip()
                for perfinfo in perftxt.split(" "):
                    try:
                        varname, valuetxt = perfinfo.split("=", 1)
                        values = valuetxt.split(";")
                        perfdata.append(tuple( [varname] + values) )
                    except:
                        pass

            # name of check command needed for PNP to choose the correct template
            if check_name:
                perfdata.append(check_name)

            if best_state in [ None, 2 ] \
               or (state < best_state and state != 2):
	    	best_result = state, output, perfdata
		best_state = state

    if best_state == None:
	return (3, "Check output not found in output of MRPE")
    else:
	return best_result


check_info['mrpe'] = (
        check_mrpe,
        "%s",
        1,
        inventory_mrpe)

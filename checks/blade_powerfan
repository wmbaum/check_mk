#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def inventory_blade_powerfan(info):
    return [ (line[0], '(40, 50)') for line in info if line[0] != '' and line[1] == '1' ]

def check_blade_powerfan(item, params, info):
    warn_perc, crit_perc = params
    for index, present, status, fancount, speedperc, rpm, ctrlstate in info:
        if index != item: continue
        perfdata=[ ('perc', speedperc, warn_perc, crit_perc, "0", "100" ),
                   ('rpm', rpm ) ]
        speedperc_int = saveint(speedperc)
        if present != "1":
            return (2, "CRIT - Fan not present", perfdata)
        elif status != "1":
            return (2, "CRIT - Status not OK", perfdata)
        elif ctrlstate != "0":
            return (2, "CRIT - Controller state not OK", perfdata)
        elif speedperc_int <= crit_perc:
            return (2, "CRIT - Speed at %d%% of max (crit at %d%%)" % (speedperc_int, crit_perc), perfdata)
        elif speedperc_int <= warn_perc:
            return (1, "WARN - Speed at %d%% of max (warning at %d%%)" % (speedperc_int, warn_perc), perfdata)
        else:
            return (0, "OK - Speed at %s RPM (%d%% of max)" % (rpm, speedperc_int), perfdata)

    return (3, "UNKNOWN - Device %s not found in SNMP data" % item)

check_info['blade_powerfan'] = (check_blade_powerfan, "Power Module Cooling Device %s", 1,  inventory_blade_powerfan)
snmp_info['blade_powerfan'] = ( ".1.3.6.1.4.1.2.3.51.2.2.6.1.1", [ 1, 2, 3, 4, 5, 6, 7 ] ) # BLADE-MIB

snmp_scan_functions['blade_powerfan'] = \
    lambda oid: re.match('BladeCenter( Advanced)* Management Module', oid(".1.3.6.1.2.1.1.1.0"))

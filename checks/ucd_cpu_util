#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

#    UCD-SNMP-MIB::ssCpuRawUser.0 = Counter32: 219998591
#    UCD-SNMP-MIB::ssCpuRawNice.0 = Counter32: 0
#    UCD-SNMP-MIB::ssCpuRawSystem.0 = Counter32: 98206536
#    UCD-SNMP-MIB::ssCpuRawIdle.0 = Counter32: 3896034232
#    UCD-SNMP-MIB::ssCpuRawWait.0 = Counter32: 325152257
#    UCD-SNMP-MIB::ssCpuRawKernel.0 = Counter32: 96265777
#    UCD-SNMP-MIB::ssCpuRawInterrupt.0 = Counter32: 1940759

kernel_util_default_levels = None

def inventory_ucd_cpu_util(info):
    if len(info) == 1:
        return [(None, "kernel_util_default_levels")]

def check_ucd_cpu_util(item, params, info):
    counters = map(saveint, info[0])
    rates = []
    this_time = time.time()
    some_counter_wrapped = False
    for n, c in enumerate(counters):
        name = "cpu.util.%d" % n
        try:
            timedif, rate = get_counter(name, this_time, c)
            rates.append(rate)
        except:
            some_counter_wrapped = True

    if some_counter_wrapped:
        return (0, "OK - first check, no counter data yet")

    total = sum(rates)
    if total == 0:
        return (3, "UNKNOWN - counters have not moved since last check, looks like state fake data")

    parts = [ r/total for r in rates ]
    user = 100 * (parts[0] + parts[1])
    system = 100 * (parts[2] + parts[5] + parts[6])
    wait = 100 * (parts[4])

    perfdata = [
          ( "user",   "%.3f" % user ),
          ( "system", "%.3f" % system ),
          ( "wait",   "%.3f" % wait ) ]

    result = (0, "OK")
    try:
        warn, crit = params
        if wait >= crit:
            result = (2, "CRIT - (wait too large)")
        elif wait >= warn:
            result = (1, "WARN - (wait too large)")
    except:
        pass

    return (result[0], result[1] + " - user: %2.1f%%, system: %2.1f%%, wait: %2.1f%%" %
            (user, system, wait), perfdata)


check_info['ucd_cpu_util'] = (check_ucd_cpu_util, "CPU utilization", 1,  inventory_ucd_cpu_util)
snmp_info['ucd_cpu_util'] = ( ".1.3.6.1.4.1.2021.11", [ 50, 51, 52, 53, 54, 55, 56 ])

# We are not sure how to safely detect the UCD SNMP Daemon. We know that
# it is mainly used on Linux, but not only. But fetching and OID outside
# of the info area for scanning is not a good idea. It will slow down
# scans for *all* hosts.
snmp_scan_functions['ucd_cpu_util'] = \
    lambda oid: "linux" in oid(".1.3.6.1.2.1.1.1.0").lower() or \
                "CMC-TC" in oid(".1.3.6.1.2.1.1.1.0")
checkgroup_of['ucd_cpu_util'] = "cpu_iowait"

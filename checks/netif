#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

linux_nic_check = "lnx_if"

def inventory_netif_link(info):
    if linux_nic_check != "legacy":
        return []
    return [ (i[0], i[4] == 'yes', i[4] == 'yes') for i in info if len(i) == 5 ]

def check_netif_link(item, targetstate, info):
    links = [ i[4] for i in info if i[0] == item ]
    if len(links) == 0:
        return (2, "CRIT - unknown network device")
    elif len(links) != 1:
        return (3, "UNKNOWN - network devices listed more than once")
    if links[0] == 'yes':
        link = True
    elif links[0] == 'no':
        link = False
    else:
        return (3, "UNKNOWN - invalid link state '%s'" % link)

    if link == targetstate:
        if link:
            return (0, "OK - Link is up")
        else:
            return (0, "OK - no link / NIC unused")
    else:
        if link:
            return (1, "WARN - Link is up, NIC should be unused")
        else:
            return (2, "CRIT - no link")


def inventory_netif_params(info):
    if linux_nic_check != "legacy":
        return []
    return [ (i[0], '', tuple(i[1:4])) for i in info if len(i) == 5 ]

def check_netif_params(item, params, info):
    infolist = [ i[1:4] for i in info if i[0] == item ]
    if len(infolist) == 0:
        return (2, "CRIT - unknown network device")
    elif len(infolist) != 1:
        return (3, "UNKNOWN - network devices listed more than once")
    act_params = tuple(infolist[0])
    if act_params == params:
        return (0, "OK - %s" % (",".join(act_params),) )
    else:
        return (2, "CRIT - %s (should be %s)" %
            (",".join(act_params), ",".join(params)))


check_info['netif.link'] = (check_netif_link,      "NIC %s link",            0,  inventory_netif_link)
check_info['netif.params'] = (check_netif_params,    "NIC %s parameter",       0,  inventory_netif_params)

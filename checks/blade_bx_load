#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

blade_bx_cpuload_default_levels = ( 5, 20 )

def inventory_blade_bx_load(info):
    if len(info) > 0:
        return [ (None, "blade_bx_cpuload_default_levels")]

def check_blade_bx_load(item, params, info):
    load = []
    for i in [ 0, 1, 2 ]:
        load.append(float(info[i][2]))

    warn, crit = params

    perfdata = [ ('load' + str(z), l, warn, crit, 0 ) for (z,l) in [ (1,load[0]), (5,load[1]), (15, load[2]) ] ]

    if load[2] >= crit:
        return (2, "15min Load %.2f (critical at %.2f)" % (load[2], crit), perfdata)
    elif load[2] >= warn:
        return (1, "15min Load %.2f (warning at %.2f)" % (load[2], warn), perfdata)
    else:
        return (0, "15min Load %.2f " % (load[2]), perfdata)

check_info['blade_bx_load'] = {
    "check_function" : check_blade_bx_load,
    "inventory_function" : inventory_blade_bx_load ,
    "service_description" : "Load",
    "has_perfdata" : True,
    "snmp_info" : (".1.3.6.1.4.1.2021.10.1", [ 1, 2, 6 ]),
    "snmp_scan_function" : lambda oid: "BX600" in oid(".1.3.6.1.2.1.1.1.0"),
}

#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

apc_symmetra_ext_temp_default_levels = (30, 35)

def inventory_temp(info):
    return [ ( line[0], "apc_symmetra_ext_temp_default_levels" ) \
            for line in info if line[1] == "2" ]

def check_temp(item, params, info):
    warn, crit = params
    for index, status, temp in info:
        if item == index:
            temp = int(temp)
            perfdata = [( "temp", temp, warn, crit )]
            infotxt = " - %sC (levels at %d/%d)" % (temp, warn, crit)
            if temp >= crit:
                return (2, "CRITICAL" + infotxt, perfdata)
            elif temp >= warn:
                return (1, "WARNING" + infotxt, perfdata)
            else:
                return (0, "OK" + infotxt, perfdata)
    return (3, "UNKNOWN - Sensor not found in SNMP data")



check_info['apc_symmetra_ext_temp'] = (check_temp, "Temperature External %s", 1, inventory_temp)
snmp_info['apc_symmetra_ext_temp'] = (
  ".1.3.6.1.4.1.318.1.1.10.2.3.2.1",
  [ 1, 3, 4 ] )

snmp_scan_functions['apc_symmetra_ext_temp'] = lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.318.1.3")

checkgroup_of["apc_symmetra_ext_temp"] = "room_temperature"
